/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;

/**
 *
 * @author chris
 */
public class AddDoctorVisit extends javax.swing.JDialog {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(AddDoctorVisit.class.getName());
    private Connection con;
    private PreparedStatement pst;
    private int residentId;

    /**
     * Creates new form AddDoctorVisit
     */
    public AddDoctorVisit(java.awt.Frame parent, boolean modal, int residentId) {
        super(parent, modal);
        this.residentId = residentId;
        initComponents();
        loadDoctors();
        setCurrentDate();
        addDocListListener();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        DocList = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        SaveVisitButton = new javax.swing.JButton();
        CancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 0, 102));
        jLabel1.setText("Doctor Visit Info");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Details"));
        jPanel1.setToolTipText("");

        jLabel2.setFont(new java.awt.Font("Segoe UI Semibold", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 51, 51));
        jLabel2.setText("Doctor  : ");

        jLabel3.setFont(new java.awt.Font("Segoe UI Semibold", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 51, 51));
        jLabel3.setText("Doc Name  : ");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI Semibold", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(51, 51, 51));
        jLabel4.setText("Specialization : ");

        jLabel5.setFont(new java.awt.Font("Segoe UI Semibold", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(51, 51, 51));
        jLabel5.setText("Visited on (DD-MM-YYYY) : ");

        jLabel6.setFont(new java.awt.Font("Segoe UI Semibold", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(51, 51, 51));
        jLabel6.setText("Notes");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel7.setFont(new java.awt.Font("Segoe UI Semibold", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(51, 51, 51));
        jLabel7.setText("Prescriptions");

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        SaveVisitButton.setFont(new java.awt.Font("Segoe UI Black", 1, 15)); // NOI18N
        SaveVisitButton.setForeground(new java.awt.Color(0, 102, 51));
        SaveVisitButton.setText("Save");
        SaveVisitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveVisitButtonActionPerformed(evt);
            }
        });

        CancelButton.setFont(new java.awt.Font("Segoe UI Black", 1, 15)); // NOI18N
        CancelButton.setForeground(new java.awt.Color(102, 51, 0));
        CancelButton.setText("Cancel");
        CancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(12, 12, 12))
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                        .addComponent(DocList, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(88, 88, 88)
                .addComponent(CancelButton)
                .addGap(34, 34, 34)
                .addComponent(SaveVisitButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(DocList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CancelButton)
                    .addComponent(SaveVisitButton))
                .addGap(85, 85, 85))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 521, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void CancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelButtonActionPerformed
       this.dispose();
       }//GEN-LAST:event_CancelButtonActionPerformed

    private void SaveVisitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveVisitButtonActionPerformed
        saveDoctorVisit();
    }//GEN-LAST:event_SaveVisitButtonActionPerformed
    
    private void loadDoctors() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/eden", "root", "");
            pst = con.prepareStatement("SELECT doctor_id, name, specialization FROM doctors ORDER BY name");
            ResultSet rs = pst.executeQuery();
            
            DocList.removeAllItems();
            DocList.addItem("-- Select Doctor --");
            DocList.addItem("-- Add New Doctor --");
            
            while (rs.next()) {
                String doctorInfo = rs.getString("name") + " (" + rs.getString("specialization") + ")";
                DocList.addItem(doctorInfo);
            }
            
            rs.close();
            pst.close();
            con.close();
            
        } catch (ClassNotFoundException | SQLException ex) {
            logger.log(java.util.logging.Level.SEVERE, "Error loading doctors", ex);
            JOptionPane.showMessageDialog(this, "Error loading doctors: " + ex.getMessage());
        }
    }
    
    private void setCurrentDate() {
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
        jTextField3.setText(dateFormat.format(new Date()));
    }
    
    private void addDocListListener() {
        DocList.addActionListener((java.awt.event.ActionEvent evt) -> {
            String selectedItem = (String) DocList.getSelectedItem();
            
            if (selectedItem != null) {
                if (selectedItem.equals("-- Add New Doctor --")) {
                    // Make fields editable for new doctor
                    jTextField1.setEditable(true);
                    jTextField2.setEditable(true);
                    jTextField1.setText("");
                    jTextField2.setText("");
                } else if (!selectedItem.equals("-- Select Doctor --")) {
                    // Load existing doctor details
                    loadDoctorDetails(selectedItem);
                    jTextField1.setEditable(false);
                    jTextField2.setEditable(false);
                }
            }
        });
    }
    
    private void loadDoctorDetails(String doctorInfo) {
        try {
            String doctorName = doctorInfo.split(" \\(")[0];
            
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/eden", "root", "");
            pst = con.prepareStatement("SELECT name, specialization FROM doctors WHERE name = ?");
            pst.setString(1, doctorName);
            ResultSet rs = pst.executeQuery();
            
            if (rs.next()) {
                jTextField1.setText(rs.getString("name"));
                jTextField2.setText(rs.getString("specialization"));
            }
            
            rs.close();
            pst.close();
            con.close();
            
        } catch (ClassNotFoundException | SQLException ex) {
            logger.log(java.util.logging.Level.SEVERE, "Error loading doctor details", ex);
            JOptionPane.showMessageDialog(this, "Error loading doctor details: " + ex.getMessage());
        }
    }
    
    private void saveDoctorVisit() {
        try {
            String doctorName = jTextField1.getText().trim();
            String specialization = jTextField2.getText().trim();
            String visitDate = jTextField3.getText().trim();
            String notes = jTextArea1.getText().trim().toLowerCase();
            String prescriptions = jTextArea2.getText().trim().toLowerCase();
            
            // Validation
            if (doctorName.isEmpty() || specialization.isEmpty() || visitDate.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please fill in all required fields");
                return;
            }
            
            // Validate date format
            if (!visitDate.matches("\\d{2}-\\d{2}-\\d{4}")) {
                JOptionPane.showMessageDialog(this, "Please enter date in DD-MM-YYYY format");
                return;
            }
            
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/eden", "root", "");
            
            int doctorId;
            String selectedItem = (String) DocList.getSelectedItem();
            
            if (selectedItem != null && selectedItem.equals("-- Add New Doctor --")) {
                // Check if doctor with same name and specialization already exists
                pst = con.prepareStatement("SELECT COUNT(*) FROM doctors WHERE name = ? AND specialization = ?");
                pst.setString(1, doctorName);
                pst.setString(2, specialization);
                ResultSet checkRs = pst.executeQuery();
                
                if (checkRs.next() && checkRs.getInt(1) > 0) {
                    JOptionPane.showMessageDialog(this, "A doctor with the same name and specialization already exists!");
                    checkRs.close();
                    pst.close();
                    con.close();
                    return;
                }
                checkRs.close();
                pst.close();
                
                // Add new doctor first
                pst = con.prepareStatement("INSERT INTO doctors (name, specialization) VALUES (?, ?)", 
                    PreparedStatement.RETURN_GENERATED_KEYS);
                pst.setString(1, doctorName);
                pst.setString(2, specialization);
                pst.executeUpdate();
                
                ResultSet generatedKeys = pst.getGeneratedKeys();
                if (generatedKeys.next()) {
                    doctorId = generatedKeys.getInt(1);
                } else {
                    throw new SQLException("Failed to get generated doctor ID");
                }
                generatedKeys.close();
                pst.close();
            } else {
                // Get existing doctor ID
                pst = con.prepareStatement("SELECT doctor_id FROM doctors WHERE name = ?");
                pst.setString(1, doctorName);
                ResultSet rs = pst.executeQuery();
                
                if (rs.next()) {
                    doctorId = rs.getInt("doctor_id");
                } else {
                    throw new SQLException("Doctor not found");
                }
                rs.close();
                pst.close();
            }
            
            // Insert doctor visit
            pst = con.prepareStatement("INSERT INTO doctor_visits (resident_id, doctor_id, visit_date, notes, prescriptions) VALUES (?, ?, STR_TO_DATE(?, '%d-%m-%Y'), ?, JSON_OBJECT('prescription', ?))");
            pst.setInt(1, residentId);
            pst.setInt(2, doctorId);
            pst.setString(3, visitDate);
            pst.setString(4, notes);
            pst.setString(5, prescriptions);
            
            int rowsAffected = pst.executeUpdate();
            
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, "Doctor visit saved successfully!");
                dispose();
            } else {
                JOptionPane.showMessageDialog(this, "Failed to save doctor visit");
            }
            
            pst.close();
            con.close();
            
        } catch (ClassNotFoundException | SQLException ex) {
            logger.log(java.util.logging.Level.SEVERE, "Error saving doctor visit", ex);
            JOptionPane.showMessageDialog(this, "Error saving doctor visit: " + ex.getMessage());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                AddDoctorVisit dialog = new AddDoctorVisit(new javax.swing.JFrame(), true, 1); // Default resident ID for testing
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CancelButton;
    private javax.swing.JComboBox<String> DocList;
    private javax.swing.JButton SaveVisitButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
}
