import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author chris
 */

public class EInventoryManagement extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(AResidentManagement.class.getName());
    private String employeeWard;

    /**
     * Creates new form Employee Dashboard
     */
    public EInventoryManagement() {
        this(null); // Default constructor for backward compatibility
    }
    
    /**
     * Creates new form Employee Dashboard with employee ward
     */
    public EInventoryManagement(String employeeWard) {
        this.employeeWard = employeeWard;
        initComponents();
        InventoryViewTable.setDefaultEditor(Object.class, null);
        updateWardLabel();
        table_update();
        // Add mouse listener to table for row selection to populate name field
        InventoryViewTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int row = InventoryViewTable.getSelectedRow();
                if (row >= 0) {
                    String medName = InventoryViewTable.getValueAt(row, 1).toString();
                    txtname.setText(medName);
                }
            }
        });
    }
    
                
    
    Connection con1;
    PreparedStatement pst;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        wardLabel = new javax.swing.JLabel();
        RButton = new javax.swing.JButton();
        InventoryButton = new javax.swing.JButton();
        doctorButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        txtname = new javax.swing.JTextField();
        findButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        refillButton = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        txtward = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtward1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        InventoryViewTable = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(153, 0, 153));

        jLabel5.setFont(new java.awt.Font("Mongolian Baiti", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(204, 255, 255));
        jLabel5.setText("Employee Dashboard");

        jButton5.setBackground(new java.awt.Color(204, 204, 255));
        jButton5.setFont(new java.awt.Font("Mongolian Baiti", 1, 18)); // NOI18N
        jButton5.setForeground(new java.awt.Color(153, 0, 0));
        jButton5.setText("Logout");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        wardLabel.setBackground(new java.awt.Color(204, 255, 204));
        wardLabel.setFont(new java.awt.Font("Mongolian Baiti", 1, 56)); // NOI18N
        wardLabel.setForeground(new java.awt.Color(0, 255, 204));
        wardLabel.setText("A");

        RButton.setBackground(new java.awt.Color(204, 204, 255));
        RButton.setFont(new java.awt.Font("Nirmala UI", 1, 24)); // NOI18N
        RButton.setForeground(new java.awt.Color(255, 255, 255));
        RButton.setText("Residents");
        RButton.setAlignmentY(0.2F);
        RButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RButtonActionPerformed(evt);
            }
        });

        InventoryButton.setBackground(new java.awt.Color(204, 204, 255));
        InventoryButton.setFont(new java.awt.Font("Nirmala UI", 1, 24)); // NOI18N
        InventoryButton.setForeground(new java.awt.Color(255, 255, 255));
        InventoryButton.setText("Inventory");
        InventoryButton.setAlignmentY(0.2F);
        InventoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InventoryButtonActionPerformed(evt);
            }
        });

        doctorButton.setBackground(new java.awt.Color(204, 204, 255));
        doctorButton.setFont(new java.awt.Font("Nirmala UI", 1, 24)); // NOI18N
        doctorButton.setForeground(new java.awt.Color(255, 255, 255));
        doctorButton.setText("Doctor Visits");
        doctorButton.setAlignmentY(0.2F);
        doctorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doctorButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(63, 63, 63)
                                .addComponent(wardLabel))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(RButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(InventoryButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(doctorButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(wardLabel)
                .addGap(42, 42, 42)
                .addComponent(RButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(InventoryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(doctorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                .addComponent(jButton5)
                .addGap(37, 37, 37))
        );

        jLabel7.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel7.setText("Inventory");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 2, 12), new java.awt.Color(102, 102, 102))); // NOI18N

        jLabel8.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel8.setText("Name : ");

        findButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        findButton.setText("Find");
        findButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findButtonActionPerformed(evt);
            }
        });

        deleteButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        refillButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        refillButton.setText("Refill");
        refillButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refillButtonActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel10.setText("Quantitiy : ");

        jLabel11.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel11.setText("Amount Spend : ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtname, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                    .addComponent(txtward)
                    .addComponent(findButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(refillButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtward1))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtname, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(txtward, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(txtward1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(findButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(refillButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(deleteButton)
                .addContainerGap(88, Short.MAX_VALUE))
        );

        InventoryViewTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Name", "dosage", "quanitity_left"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(InventoryViewTable);

        addButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(171, 171, 171)
                .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(184, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(addButton)
                .addGap(0, 68, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Updates the ward label to display the employee's assigned ward
     */
    private void updateWardLabel() {
        if (employeeWard != null && !employeeWard.isEmpty()) {
            wardLabel.setText(employeeWard);
        } else {
            wardLabel.setText("A"); // Default fallback
        }
    }
    
    /**
     * Validates that the employee has access to the specified ward
     * @param ward The ward to validate access for
     * @return true if employee has access, false otherwise
     */
    
    
    /**
     * Sets up UI restrictions for employees
     */
    
    
    public void table_update(){
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con1 = DriverManager.getConnection("jdbc:mysql://localhost/eden","root","");
            
            // If employee ward is specified, filter residents by ward
            String query = "SELECT medication_id, name, dosage, quantity_left, " +
                         "monthly_requirement, last_refill_date FROM medications";
            pst = con1.prepareStatement(query);
            
            ResultSet rs = pst.executeQuery();
            DefaultTableModel d = (DefaultTableModel)InventoryViewTable.getModel();
            d.setRowCount(0);
       
            while(rs.next()){
                Vector<String> v2 = new Vector<>();
                v2.add(rs.getString("medication_id"));
                v2.add(rs.getString("name"));
                v2.add(rs.getString("dosage"));
                v2.add(rs.getString("quantity_left"));
                v2.add(rs.getString("monthly_requirement"));
                v2.add(rs.getString("last_refill_date"));
                d.addRow(v2);
            }
        } catch (ClassNotFoundException ex) {
            System.getLogger(AResidentManagement.class.getName()).log(System.Logger.Level.ERROR, (String) null, ex);
        } catch (SQLException ex) {
            System.getLogger(AResidentManagement.class.getName()).log(System.Logger.Level.ERROR, (String) null, ex);
        }
    }
    
    
    private void findButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findButtonActionPerformed
        try {
            String name = txtname.getText().trim();
            
            if (name.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please enter a medication name to search");
                return;
            }
            
            Class.forName("com.mysql.cj.jdbc.Driver");
            con1 = DriverManager.getConnection("jdbc:mysql://localhost/eden","root","");
            String query = "SELECT medication_id, name, dosage, quantity_left, monthly_requirement, last_refill_date " +
                          "FROM medications WHERE name LIKE ?";
            pst = con1.prepareStatement(query);
            pst.setString(1, "%" + name + "%");
            
            ResultSet rs = pst.executeQuery();
            DefaultTableModel d = (DefaultTableModel)InventoryViewTable.getModel();
            d.setRowCount(0);
            
            boolean found = false;
            while(rs.next()) {
                found = true;
                Vector<String> v2 = new Vector<>();
                v2.add(rs.getString("medication_id"));
                v2.add(rs.getString("name"));
                v2.add(rs.getString("dosage"));
                v2.add(rs.getString("quantity_left"));
                v2.add(rs.getString("monthly_requirement"));
                v2.add(rs.getString("last_refill_date"));
                d.addRow(v2);
            }
            
            if (!found) {
                JOptionPane.showMessageDialog(this, "No medications found with that name");
            }
            
        } catch (ClassNotFoundException | SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error searching: " + ex.getMessage());
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_findButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        int selectedRow = InventoryViewTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a medication to delete");
            return;
        }

        String medId = InventoryViewTable.getValueAt(selectedRow, 0).toString();
        String medName = InventoryViewTable.getValueAt(selectedRow, 1).toString();

        int confirmResult = JOptionPane.showConfirmDialog(
            this,
            "Are you sure you want to delete medication: " + medName + "?",
            "Confirm Delete",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.WARNING_MESSAGE
        );

        if (confirmResult == JOptionPane.YES_OPTION) {
            try {
                Class.forName("com.mysql.cj.jdbc.Driver");
                con1 = DriverManager.getConnection("jdbc:mysql://localhost/eden","root","");
                pst = con1.prepareStatement("DELETE FROM medications WHERE medication_id = ?");
                pst.setString(1, medId);
                
                int result = pst.executeUpdate();
                if (result > 0) {
                    JOptionPane.showMessageDialog(this, "Medication deleted successfully");
                    table_update(); // Refresh table
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to delete medication");
                }
            } catch (ClassNotFoundException | SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error deleting: " + ex.getMessage());
                logger.log(java.util.logging.Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // Open SelectResident dialog first
        SelectResident selectDialog = new SelectResident(this, true);
        selectDialog.setVisible(true);
        String residentIdStr = selectDialog.getSelectedResidentId();
        if (residentIdStr != null && !residentIdStr.isEmpty()) {
            try {
                int residentId = Integer.parseInt(residentIdStr);
                AddMedication dialog = new AddMedication(this, true, residentId);
                dialog.setVisible(true);
                // Refresh the table after dialog closes
                table_update();
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid resident ID selected.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "No resident selected. Medication not added.");
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void refillButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refillButtonActionPerformed
        try {
            String name = txtname.getText().trim();
            String quantityStr = txtward.getText().trim();
            String amountStr = txtward1.getText().trim();
            if (name.isEmpty() || quantityStr.isEmpty() || amountStr.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please enter medication name, quantity, and amount spent");
                return;
            }
            int quantity;
            double amountSpent;
            try {
                quantity = Integer.parseInt(quantityStr);
                if (quantity <= 0) {
                    JOptionPane.showMessageDialog(this, "Please enter a valid positive quantity");
                    return;
                }
                amountSpent = Double.parseDouble(amountStr);
                if (amountSpent < 0) {
                    JOptionPane.showMessageDialog(this, "Please enter a valid amount spent");
                    return;
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Please enter valid numbers for quantity and amount spent");
                return;
            }
            Class.forName("com.mysql.cj.jdbc.Driver");
            con1 = DriverManager.getConnection("jdbc:mysql://localhost/eden","root","");
            con1.setAutoCommit(false); // Start transaction
            // Get medication details and current ward amount
            String medQuery = "SELECT m.medication_id, m.quantity_left, r.ward_id, w.assigned_amount " +
                             "FROM medications m " +
                             "JOIN residents r ON m.resident_id = r.resident_id " +
                             "JOIN wards w ON w.ward_id = r.ward_id " +
                             "WHERE m.name = ?";
            pst = con1.prepareStatement(medQuery);
            pst.setString(1, name);
            ResultSet rs = pst.executeQuery();
            if (!rs.next()) {
                con1.rollback();
                JOptionPane.showMessageDialog(this, "Medication not found or not linked to a ward");
                return;
            }
            int currentQty = rs.getInt("quantity_left");
            String wardId = rs.getString("ward_id");
            double currentWardAmount = rs.getDouble("assigned_amount");
            
            // Check if ward has enough budget
            if (currentWardAmount < amountSpent) {
                con1.rollback();
                JOptionPane.showMessageDialog(this, "Insufficient ward budget. Current budget: $" + String.format("%.2f", currentWardAmount));
                return;
            }
            // Update medication quantity and last refill date
            String updateMedQuery = "UPDATE medications SET quantity_left = ?, last_refill_date = CURRENT_DATE WHERE name = ?";
            pst = con1.prepareStatement(updateMedQuery);
            pst.setInt(1, currentQty + quantity);
            pst.setString(2, name);
            pst.executeUpdate();
            // Update ward assigned amount
            String updateWardQuery = "UPDATE wards SET assigned_amount = (assigned_amount - ?) WHERE ward_id = ?";
            pst = con1.prepareStatement(updateWardQuery);
            pst.setDouble(1, amountSpent);
            pst.setString(2, employeeWard);
            int wardUpdateResult = pst.executeUpdate();
            
            if (wardUpdateResult == 0) {
                con1.rollback();
                JOptionPane.showMessageDialog(this, "Failed to update ward budget. Please try again.");
                return;
            }
            
            // Verify the update
            String verifyQuery = "SELECT assigned_amount FROM wards WHERE ward_id = ?";
            pst = con1.prepareStatement(verifyQuery);
            pst.setString(1, wardId);
            ResultSet verifyRs = pst.executeQuery();
            
            if (verifyRs.next()) {
                double newAmount = verifyRs.getDouble("assigned_amount");
                con1.commit();
                JOptionPane.showMessageDialog(this, String.format("Ward budget updated successfully", newAmount));
            } else {
                con1.rollback();
                JOptionPane.showMessageDialog(this, "Failed to verify ward budget update. Please try again.");
                return;
            }
            JOptionPane.showMessageDialog(this, "Medication refilled and ward budget updated successfully");
            table_update();
            txtname.setText("");
            txtward.setText("");
            txtward1.setText("");
        } catch (ClassNotFoundException | SQLException ex) {
            try {
                if (con1 != null) con1.rollback();
            } catch (SQLException e) {
                logger.log(java.util.logging.Level.SEVERE, "Error rolling back", e);
            }
            JOptionPane.showMessageDialog(this, "Error refilling: " + ex.getMessage());
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        } finally {
            try {
                if (con1 != null) {
                    con1.setAutoCommit(true);
                    con1.close();
                }
            } catch (SQLException ex) {
                logger.log(java.util.logging.Level.SEVERE, "Error closing connection", ex);
            }
        }
    }//GEN-LAST:event_refillButtonActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        int confirmResult = JOptionPane.showConfirmDialog(
            this, 
            "Are you sure you want to logout?", 
            "Confirm Logout", 
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE
        );
        
        if (confirmResult == JOptionPane.YES_OPTION) {
            // Close current frame
            this.dispose();
            
            // Open login frame
            java.awt.EventQueue.invokeLater(() -> {
                new Login().setVisible(true);
            });
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void RButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RButtonActionPerformed
        this.dispose();
        new EResidentManagement1(employeeWard).setVisible(true);
    }//GEN-LAST:event_RButtonActionPerformed

    private void InventoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InventoryButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InventoryButtonActionPerformed

    private void doctorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doctorButtonActionPerformed
        this.dispose();
        new EDoctorVisitsManagement(employeeWard).setVisible(true);
    }//GEN-LAST:event_doctorButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new AResidentManagement().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton InventoryButton;
    private javax.swing.JTable InventoryViewTable;
    private javax.swing.JButton RButton;
    private javax.swing.JButton addButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton doctorButton;
    private javax.swing.JButton findButton;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton refillButton;
    private javax.swing.JTextField txtname;
    private javax.swing.JTextField txtward;
    private javax.swing.JTextField txtward1;
    private javax.swing.JLabel wardLabel;
    // End of variables declaration//GEN-END:variables
}
