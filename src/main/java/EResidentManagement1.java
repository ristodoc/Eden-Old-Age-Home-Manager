
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author chris
 */

public class EResidentManagement1 extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(AResidentManagement.class.getName());
    private String employeeWard;

    /**
     * Creates new form Employee Dashboard
     */
    public EResidentManagement1() {
        this(null); // Default constructor for backward compatibility
    }
    
    /**
     * Creates new form Employee Dashboard with employee ward
     */
    public EResidentManagement1(String employeeWard) {
        this.employeeWard = employeeWard;
        initComponents();
        ResidentViewTable.setDefaultEditor(Object.class, null);
        updateWardLabel();
        setupEmployeeRestrictions();
        table_update();
        
        ResidentViewTable.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                int selectedRow = ResidentViewTable.getSelectedRow();
                if (selectedRow >= 0) {
                    DefaultTableModel model = (DefaultTableModel) ResidentViewTable.getModel();
                    String name = (String) model.getValueAt(selectedRow, 1); // Name column
                    String ward = (String) model.getValueAt(selectedRow, 2); // Ward column
                    txtname.setText(name);
                    txtward.setText(ward);
                }
            }
    });
                }
    
    Connection con1;
    PreparedStatement pst;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        wardLabel = new javax.swing.JLabel();
        RButton = new javax.swing.JButton();
        InventoryButton = new javax.swing.JButton();
        doctorButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        txtname = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        txtward = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        ResidentViewTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(153, 0, 153));

        jLabel5.setFont(new java.awt.Font("Mongolian Baiti", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(204, 255, 255));
        jLabel5.setText("Employee Dashboard");

        jButton5.setBackground(new java.awt.Color(204, 204, 255));
        jButton5.setFont(new java.awt.Font("Mongolian Baiti", 1, 18)); // NOI18N
        jButton5.setForeground(new java.awt.Color(153, 0, 0));
        jButton5.setText("Logout");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        wardLabel.setBackground(new java.awt.Color(204, 255, 204));
        wardLabel.setFont(new java.awt.Font("Mongolian Baiti", 1, 56)); // NOI18N
        wardLabel.setForeground(new java.awt.Color(0, 255, 204));
        wardLabel.setText("A");

        RButton.setBackground(new java.awt.Color(204, 204, 255));
        RButton.setFont(new java.awt.Font("Nirmala UI", 1, 24)); // NOI18N
        RButton.setForeground(new java.awt.Color(255, 255, 255));
        RButton.setText("Residents");
        RButton.setAlignmentY(0.2F);
        RButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RButtonActionPerformed(evt);
            }
        });

        InventoryButton.setBackground(new java.awt.Color(204, 204, 255));
        InventoryButton.setFont(new java.awt.Font("Nirmala UI", 1, 24)); // NOI18N
        InventoryButton.setForeground(new java.awt.Color(255, 255, 255));
        InventoryButton.setText("Inventory");
        InventoryButton.setAlignmentY(0.2F);
        InventoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InventoryButtonActionPerformed(evt);
            }
        });

        doctorButton.setBackground(new java.awt.Color(204, 204, 255));
        doctorButton.setFont(new java.awt.Font("Nirmala UI", 1, 24)); // NOI18N
        doctorButton.setForeground(new java.awt.Color(255, 255, 255));
        doctorButton.setText("Doctor Visits");
        doctorButton.setAlignmentY(0.2F);
        doctorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doctorButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(63, 63, 63)
                                .addComponent(wardLabel))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(RButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(InventoryButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(doctorButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(wardLabel)
                .addGap(42, 42, 42)
                .addComponent(RButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(InventoryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(doctorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                .addComponent(jButton5)
                .addGap(37, 37, 37))
        );

        jLabel7.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel7.setText("Resident");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 2, 12), new java.awt.Color(102, 102, 102))); // NOI18N

        jLabel8.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel8.setText("Name : ");

        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton1.setText("Find");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton2.setText("Delete");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton3.setText("Add");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton4.setText("Edit");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel10.setText("Ward : ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtname, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                    .addComponent(txtward)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtname, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(txtward, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3)
                .addGap(41, 41, 41))
        );

        ResidentViewTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Name", "Ward"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(ResidentViewTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 79, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(115, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(62, 62, 62))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Updates the ward label to display the employee's assigned ward
     */
    private void updateWardLabel() {
        if (employeeWard != null && !employeeWard.isEmpty()) {
            wardLabel.setText(employeeWard);
        } else {
            wardLabel.setText("A"); // Default fallback
        }
    }
    
    /**
     * Validates that the employee has access to the specified ward
     * @param ward The ward to validate access for
     * @return true if employee has access, false otherwise
     */
    private boolean validateWardAccess(String ward) {
        return employeeWard != null && employeeWard.equals(ward);
    }
    
    /**
     * Sets up UI restrictions for employees
     */
    private void setupEmployeeRestrictions() {
        if (employeeWard != null && !employeeWard.isEmpty()) {
            // Set the ward field to the employee's ward and make it read-only
            txtward.setText(employeeWard);
            txtward.setEditable(false);
            txtward.setBackground(new java.awt.Color(240, 240, 240)); // Light gray background
            txtward.setToolTipText("You can only manage residents in your assigned ward: " + employeeWard);
        }
    }
    
    public void table_update(){
        try {
            int c;
            Class.forName("com.mysql.cj.jdbc.Driver");
            con1 = DriverManager.getConnection("jdbc:mysql://localhost/eden","root","");
            
            // If employee ward is specified, filter residents by ward
            String query;
            if (employeeWard != null && !employeeWard.isEmpty()) {
                query = "SELECT * FROM residents WHERE ward_id = ?";
                pst = con1.prepareStatement(query);
                pst.setString(1, employeeWard);
            } else {
                query = "SELECT * FROM residents";
                pst = con1.prepareStatement(query);
            }
            
            ResultSet rs = pst.executeQuery();
            ResultSetMetaData rsd = rs.getMetaData();
            c = rsd.getColumnCount();
            
            DefaultTableModel d = (DefaultTableModel)ResidentViewTable.getModel();
            d.setRowCount(0);
       
            while(rs.next()){
                Vector<String> v2 = new Vector<>();
                v2.add(rs.getString("resident_id"));
                v2.add(rs.getString("name"));
                v2.add(rs.getString("ward_id"));
                d.addRow(v2);
            }
        } catch (ClassNotFoundException ex) {
            System.getLogger(AResidentManagement.class.getName()).log(System.Logger.Level.ERROR, (String) null, ex);
        } catch (SQLException ex) {
            System.getLogger(AResidentManagement.class.getName()).log(System.Logger.Level.ERROR, (String) null, ex);
        }
    }
    
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try {
            String name = txtname.getText().trim();
            String ward = txtward.getText().trim();
            
            // Build query with employee ward restriction
            StringBuilder query = new StringBuilder("SELECT * FROM residents WHERE ward_id = ?");
            int parameterIndex = 1;
            
            if (!name.isEmpty()) {
                query.append(" AND name LIKE ?");
            }
            if (!ward.isEmpty()) {
                query.append(" AND ward_id LIKE ?");
            }
            
            Class.forName("com.mysql.cj.jdbc.Driver");
            con1 = DriverManager.getConnection("jdbc:mysql://localhost/eden","root","");
            pst = con1.prepareStatement(query.toString());
            
            // Always set employee ward as first parameter
            pst.setString(parameterIndex++, employeeWard);
            
            if (!name.isEmpty()) {
                pst.setString(parameterIndex++, "%" + name + "%");
            }
            if (!ward.isEmpty()) {
                pst.setString(parameterIndex, "%" + ward + "%");
            }
            
            ResultSet rs = pst.executeQuery();            
            DefaultTableModel d = (DefaultTableModel)ResidentViewTable.getModel();
            d.setRowCount(0);
            
            while(rs.next()){
                Vector<String> v2 = new Vector<>();
                v2.add(rs.getString("resident_id"));
                v2.add(rs.getString("name"));
                v2.add(rs.getString("ward_id"));
                d.addRow(v2.toArray());
            }
            
            if (d.getRowCount() == 0) {
                JOptionPane.showMessageDialog(null, "No matching records found in your ward");
            }
            
        } catch (ClassNotFoundException | SQLException ex) {
            logger.log(java.util.logging.Level.SEVERE, "Error searching residents", ex);
            JOptionPane.showMessageDialog(null, "Error occurred while searching: " + ex.getMessage());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        try {
            String name = txtname.getText().trim();
            String ward = txtward.getText().trim();
            
            if (name.isEmpty() || ward.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please fill in both name and ward fields to delete a resident");
                return;
            }
            
            // Validate that the ward matches employee's assigned ward
            if (!ward.equals(employeeWard)) {
                JOptionPane.showMessageDialog(null, "You can only delete residents from your assigned ward: " + employeeWard, "Access Denied", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // Show confirmation dialog
            int confirmResult = JOptionPane.showConfirmDialog(
                null, 
                "Are you sure you want to delete resident: " + name + " from ward: " + ward + "?", 
                "Confirm Delete", 
                JOptionPane.YES_NO_OPTION
            );
            
            if (confirmResult != JOptionPane.YES_OPTION) {
                return;
            }
            
            Class.forName("com.mysql.cj.jdbc.Driver");
            con1 = DriverManager.getConnection("jdbc:mysql://localhost/eden","root","");
            
            // Check if resident exists in employee's ward
            pst = con1.prepareStatement("SELECT COUNT(*) FROM residents WHERE name = ? AND ward_id = ?");
            pst.setString(1, name);
            pst.setString(2, employeeWard);
            ResultSet rs = pst.executeQuery();
            
            if (rs.next() && rs.getInt(1) == 0) {
                JOptionPane.showMessageDialog(null, "Resident not found in your assigned ward!");
                return;
            }
            
            // Delete the resident (restricted to employee's ward)
            pst = con1.prepareStatement("DELETE FROM residents WHERE name = ? AND ward_id = ?");
            pst.setString(1, name);
            pst.setString(2, employeeWard);
            int rowsAffected = pst.executeUpdate();
            
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "Resident deleted successfully!");
                txtname.setText("");
                txtward.setText("");
                table_update(); // Refresh the table
            } else {
                JOptionPane.showMessageDialog(null, "Failed to delete resident!");
            }
            
        } catch (ClassNotFoundException | SQLException ex) {
            logger.log(java.util.logging.Level.SEVERE, "Error deleting resident", ex);
            JOptionPane.showMessageDialog(null, "Error occurred while deleting resident: " + ex.getMessage());
        }
        }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            String name = txtname.getText().trim();
            String ward = txtward.getText().trim();
            
            if (name.isEmpty() || ward.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please fill in both name and ward fields");
                return;
            }
            
            // Validate that the ward matches employee's assigned ward
            if (!ward.equals(employeeWard)) {
                JOptionPane.showMessageDialog(null, "You can only add residents to your assigned ward: " + employeeWard, "Access Denied", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // Check if resident with same name exists
            Class.forName("com.mysql.cj.jdbc.Driver");
            con1 = DriverManager.getConnection("jdbc:mysql://localhost/eden","root","");
            pst = con1.prepareStatement("SELECT COUNT(*) FROM residents WHERE name = ?");
            pst.setString(1, name);
            ResultSet rs = pst.executeQuery();
            
            if (rs.next() && rs.getInt(1) > 0) {
                JOptionPane.showMessageDialog(null, "Resident already exists!");
                return;
            }
            
            // If no existing resident found, proceed with insert (restricted to employee's ward)
            pst = con1.prepareStatement("insert into residents(name,ward_id)values(?,?)");
            pst.setString(1, name);
            pst.setString(2, employeeWard); // Force to employee's ward
            pst.executeUpdate();
            JOptionPane.showMessageDialog(null, "Resident Added Successfully to Ward " + employeeWard);
            
            txtname.setText("");
            txtward.setText("");
            table_update();
            
        } catch (ClassNotFoundException | SQLException ex) {
            logger.log(java.util.logging.Level.SEVERE, "Error adding resident", ex);
            JOptionPane.showMessageDialog(null, "Error occurred while adding resident: " + ex.getMessage());
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // Edit selected resident. Try to find resident by exact name and ward if provided,
        // otherwise use the selected row in the table.
        String name = txtname.getText().trim();
        String ward = txtward.getText().trim();
        
        if (name.isEmpty() || ward.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please fill in both name and ward fields");
            return;
        }

        // Validate that the ward matches employee's assigned ward
        if (!ward.equals(employeeWard)) {
            JOptionPane.showMessageDialog(null, "You can only edit residents from your assigned ward: " + employeeWard, "Access Denied", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con1 = DriverManager.getConnection("jdbc:mysql://localhost/eden","root","");
            // Find resident by exact match of name and ward (restricted to employee's ward)
            pst = con1.prepareStatement("SELECT resident_id FROM residents WHERE name = ? AND ward_id = ? LIMIT 1");
            pst.setString(1, name);
            pst.setString(2, employeeWard);
            ResultSet rs = pst.executeQuery();
            if (!rs.next()) {
                JOptionPane.showMessageDialog(null, "Resident not found in your assigned ward");
                return;
            }
            int residentId = rs.getInt("resident_id");

            EditResident edialog = new EditResident((java.awt.Frame) this, true, residentId, name, employeeWard);
            edialog.setLocationRelativeTo(this);
            edialog.setVisible(true);
        } catch (ClassNotFoundException | SQLException ex) {
            logger.log(java.util.logging.Level.SEVERE, "Error opening edit dialog", ex);
            JOptionPane.showMessageDialog(null, "Error opening edit dialog: " + ex.getMessage());
        }
        table_update();
       
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        int confirmResult = JOptionPane.showConfirmDialog(
            this, 
            "Are you sure you want to logout?", 
            "Confirm Logout", 
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE
        );
        
        if (confirmResult == JOptionPane.YES_OPTION) {
            // Close current frame
            this.dispose();
            
            // Open login frame
            java.awt.EventQueue.invokeLater(() -> {
                new Login().setVisible(true);
            });
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void RButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RButtonActionPerformed
        
    }//GEN-LAST:event_RButtonActionPerformed

    private void InventoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InventoryButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InventoryButtonActionPerformed

    private void doctorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doctorButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_doctorButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new AResidentManagement().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton InventoryButton;
    private javax.swing.JButton RButton;
    private javax.swing.JTable ResidentViewTable;
    private javax.swing.JButton doctorButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtname;
    private javax.swing.JTextField txtward;
    private javax.swing.JLabel wardLabel;
    // End of variables declaration//GEN-END:variables
}
